package org.usfirst.frc.team1089.robot.util;

import com.ctre.CANTalon;

public class MotionProfile {			

	public static final int NUM_POINTS = 4; // Number of points to fill
	public static final int MIN_POINTS = 4; // Minimum number of points needed before we start processing

	
	public static final CANTalon.TrajectoryPoint[] POINTS_L = {
		createTrajectoryPoint(0, 0, 500),
		createTrajectoryPoint(2000, 100, 1000),
		createTrajectoryPoint(3000, 100, 1000),
		createTrajectoryPoint(4000, 50, 1000)
	};
	
	public static final CANTalon.TrajectoryPoint[] POINTS_R = {
		createTrajectoryPoint(0, 0, 500),
		createTrajectoryPoint(-2000, 100, 1000),
		createTrajectoryPoint(-3000, 100, 1000),
		createTrajectoryPoint(-4000, 50, 1000)
	};
	
	public static double [][]PointsL = new double[][]{
	
	{0, 0, 500},
	{2000, 100, 1000},
	{3000, 100, 1000},
	{4000, 50, 1000}};
	
	public static double [][]PointsR = new double[][]{		
	
	{0, 0, 500},
	{2000, 100, 1000},
	{3000, 100, 1000},
	{4000, 50, 1000}};	
	
	/*{1481, 75, 1000},
	{3570, 75, 1000},
	{5181, 75, 1000},
	{8508, 250, 1000},
	{11370, 250, 1000},
	{13779, 250, 1000},
	{16216, 250, 1000}};	*/


	/**
	 * <pre>
	 * private static final CANTalon.TrajectoryPoint createTrajectoryPoint(double pos, 
	 *                                                                     double vel, 
	 *                                                                     int dur)
	 * </pre>
	 * Creates a new {@link CANTalon.TrajectoryPoint}
	 * given the specified encoder position, rpm, and duration
	 * @param rot amount of rotations this point should be at
	 * @param rpm the velocity that the {@code CANTalon} should be at
	 * @param ms  the duration of this point, in milliseconds
	 * @return the constructed trajectory point
	 */
	private static final CANTalon.TrajectoryPoint createTrajectoryPoint(double rot, double rpm, int ms) {
		CANTalon.TrajectoryPoint tp = new CANTalon.TrajectoryPoint();
		
		// Set the position, velocity, and duration
		tp.position = rot;
		tp.velocity = rpm;
		tp.timeDurMs = ms;
		
		// TODO explain this
		tp.profileSlotSelect = 0;
		
		// Assume that this is neither the first or last point or that it is velocity only
		tp.isLastPoint = false;
		tp.zeroPos = false;
		tp.velocityOnly = false;
		
		return tp;
	}
}		

		/*public static final int kNumPoints =126;		
		// Position (rotations)	Velocity (RPM)	Duration (ms)
		public static double [][]Points = new double[][]{		
		{0,	0	,15},
		{0.000148148148148148,	1.185185185	,15},
		{0.000666666666666667,	2.962962963	,15},
		{0.0017037037037037,	5.333333333	,15},
		{0.00340740740740741,	8.296296296	,15},
		{0.00592592592592593,	11.85185185	,15},
		{0.00940740740740741,	16	,15},
		{0.014,	20.74074074	,15},
		{0.0198518518518518,	26.07407407	,15},
		{0.0271111111111111,	32	,15},
		{0.0359259259259259,	38.51851852	,15},
		{0.0464444444444444,	45.62962963	,15},
		{0.0588148148148148,	53.33333333	,15},
		{0.0731851851851852,	61.62962963	,15},
		{0.0897037037037037,	70.51851852	,15},
		{0.108444444444444,	79.40740741	,15},
		{0.129407407407407,	88.2962963	,15},
		{0.152592592592593,	97.18518519	,15},
		{0.178,	106.0740741	,15},
		{0.20562962962963,	114.962963	,15},
		{0.235481481481481,	123.8518519	,15},
		{0.267555555555556,	132.7407407	,15},
		{0.301851851851852,	141.6296296	,15},
		{0.33837037037037,	150.5185185	,15},
		{0.377111111111111,	159.4074074	,15},
		{0.418074074074074,	168.2962963	,15},
		{0.461259259259259,	177.1851852	,15},
		{0.506666666666667,	186.0740741	,15},
		{0.554148148148148,	193.7777778	,15},
		{0.603481481481481,	200.8888889	,15},
		{0.654518518518518,	207.4074074	,15},
		{0.707111111111111,	213.3333333	,15},
		{0.761111111111111,	218.6666667	,15},
		{0.81637037037037,	223.4074074	,15},
		{0.872740740740741,	227.5555556	,15},
		{0.930074074074074,	231.1111111	,15},
		{0.988222222222222,	234.0740741	,15},
		{1.04703703703704,	236.4444444	,15},
		{1.10637037037037,	238.2222222	,15},
		{1.16607407407407,	239.4074074	,15},
		{1.226,	240	,15},
		{1.286,	240	,15},
		{1.346,	240	,15},
		{1.406,	240	,15},
		{1.466,	240	,15},
		{1.526,	240	,15},
		{1.586,	240	,15},
		{1.646,	240	,15},
		{1.706,	240	,15},
		{1.766,	240	,15},
		{1.826,	240	,15},
		{1.886,	240	,15},
		{1.946,	240	,15},
		{2.006,	240	,15},
		{2.066,	240	,15},
		{2.126,	240	,15},
		{2.186,	240	,15},
		{2.246,	240	,15},
		{2.306,	240	,15},
		{2.366,	240	,15},
		{2.426,	240	,15},
		{2.486,	240	,15},
		{2.546,	240	,15},
		{2.606,	240	,15},
		{2.666,	240	,15},
		{2.726,	240	,15},
		{2.786,	240	,15},
		{2.846,	240	,15},
		{2.906,	240	,15},
		{2.966,	240	,15},
		{3.026,	240	,15},
		{3.086,	240	,15},
		{3.146,	240	,15},
		{3.206,	240	,15},
		{3.266
			,	240	,15},
		{3.326,	240	,15},
		{3.386,	240	,15},
		{3.446,	240	,15},
		{3.506,	240	,15},
		{3.566,	240	,15},
		{3.626,	240	,15},
		{3.686,	240	,15},
		{3.746,	240	,15},
		{3.806,	240	,15},
		{3.866,	240	,15},
		{3.92585185185185,	238.8148148	,15},
		{3.98533333333334,	237.037037	,15},
		{4.0442962962963,	234.6666667	,15},
		{4.1025925925926,	231.7037037	,15},
		{4.16007407407408,	228.1481481	,15},
		{4.21659259259259,	224	,15},
		{4.272,	219.2592593	,15},
		{4.32614814814815,	213.9259259	,15},
		{4.37888888888889,	208	,15},
		{4.43007407407408,	201.4814815	,15},
		{4.47955555555556,	194.3703704	,15},
		{4.52718518518519,	186.6666667	,15},
		{4.57281481481482,	178.3703704	,15},
		{4.6162962962963,	169.4814815	,15},
		{4.65755555555556,	160.5925926	,15},
		{4.69659259259259,	151.7037037	,15},
		{4.73340740740741,	142.8148148	,15},
		{4.768,	133.9259259	,15},
		{4.80037037037037,	125.037037	,15},
		{4.83051851851852,	116.1481481	,15},
		{4.85844444444445,	107.2592593	,15},
		{4.88414814814815,	98.37037037	,15},
		{4.90762962962963,	89.48148148	,15},
		{4.92888888888889,	80.59259259	,15},
		{4.94792592592593,	71.7037037	,15},
		{4.96474074074074,	62.81481481	,15},
		{4.97933333333333,	53.92592593	,15},
		{4.99185185185185,	46.22222222	,15},
		{5.00251851851852,	39.11111111	,15},
		{5.01148148148148,	32.59259259	,15},
		{5.01888888888889,	26.66666667	,15},
		{5.02488888888889,	21.33333333	,15},
		{5.02962962962963,	16.59259259	,15},
		{5.03325925925926,	12.44444444	,15},
		{5.03592592592593,	8.888888889	,15},
		{5.03777777777778,	5.925925926	,15},
		{5.03896296296296,	3.555555556	,15},
		{5.03962962962963,	1.777777778	,15},
		{5.03992592592593,	0.592592593	,15},
		{5.04,	1.24345E-14	,15},
		{5.04,	0	,15}};*/

